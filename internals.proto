syntax = "proto3";

// Not always a valid ethereum address, the rules for ID's follow the ethereum rules because it uses keccak256
message Address {
	// a keccak256 hash representing the entity uniquely
	string address = 1;
	// IF it is a valid cycle(ethereum) address it will have a balance of CYC
	int32 balance = 2;
}

// A TensorFlow graph exported using the TensorFlow serving API
message Model {
	// the cycle address that owns the model
	Address owner = 1;
	// the cycle address assigned to the model, along with its balance
	Address address = 2;
	// the actual data of the model
	bytes data = 4;
}

// Generated by clients to request work be completed
message Request {
	// the cycle address that owns the data
	Address owner = 1;
	// the cycle address assigned to the Request, along with its balance
	Address address = 2;
	// the address of the model the data should be fed to
	Address target_model = 3;
	// the actuall data that needs to be processed in the request
	bytes data = 4;
}

// Generated by miners
message Response {
	// the owner of the response, person who mined the data
	Address owner = 1;
	// the cycle address assigned to the Response, along with its balance
	Address address = 2;
	// the Request the response pretains to
	Address child = 3;
	// the actual solution from the work
	bytes solution = 5;
	// the time it was completed
	int32 time = 6;
	// the amount of cycle coin being staked that the provided solution is correct
	int32 stake = 7;
	// keccak256 hash of solution, stake, solver, and time as proof
	string proof_of_work = 8;
	
}
